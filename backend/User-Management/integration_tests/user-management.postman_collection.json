{
	"info": {
		"_postman_id": "5685b9fa-f3df-43a5-95da-48b8801e9ebb",
		"name": "Assignment 1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43602989",
		"_collection_link": "https://adityaatbhaiya.postman.co/workspace/Aditya-Atbhaiya's-Workspace~041f63a0-a42d-4cc9-845d-a0619fb9d7b3/collection/43602989-5685b9fa-f3df-43a5-95da-48b8801e9ebb?action=share&source=collection_link&creator=43602989"
	},
	"item": [
		{
			"name": "Token generation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"if(jsonData.access_token) {",
							"    pm.environment.set(\"access_token\", jsonData.access_token)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "user-management-api",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "RdvGlsuP7wNjPDXosKFrYUz1N2pGMdAF",
							"type": "text"
						},
						{
							"key": "username",
							"value": "adminUser",
							"type": "text"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:7072/realms/user-management-realm/protocol/openid-connect/token",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7072",
					"path": [
						"realms",
						"user-management-realm",
						"protocol",
						"openid-connect",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// var statusCode = pm.response.code",
							"var jsonData = pm.response.json();",
							"",
							"// if(statusCode === 201) {",
							"    pm.test(\"Status code is 201\", () => {",
							"        pm.response.to.have.status(201)",
							"    })",
							"",
							"    pm.test(\"User registered successfully!\", () => {",
							"        pm.expect(jsonData.message).to.eql(\"User registered successfully!\")",
							"    })",
							"",
							"    if(jsonData.userId) {",
							"        pm.environment.set(\"userId\", jsonData.userId)",
							"    }",
							"// }",
							"// else if(statusCode === 409) {",
							"//     pm.test(\"Status code is 409\", () => {",
							"//         pm.response.to.have.status(409)",
							"//     })",
							"",
							"//     pm.test(\"Email already exists!\", () => {",
							"//         pm.expect(jsonData.message).to.eql(\"Email already exists!\")",
							"//     })",
							"// }",
							"// else {",
							"//     pm.test(`Unexpected status code - ${statusCode}`, () => {",
							"//         pm.expect.fail(`Received unexpected status code -${statusCode}`)",
							"//     })",
							"// }"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Prabhdeep\",\n    \"lastName\": \"S\",\n    \"email\": \"prabh@test.com\",\n    \"phoneNumber\": \"1234567891\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// var statusCode = pm.response.code",
							"",
							"// if(statusCode === 200) {",
							"    pm.test(\"Status code is 200\", () => {",
							"        pm.response.to.have.status(200);",
							"    });",
							"// }",
							"// else if(statusCode === 404) {",
							"//     pm.test(\"Status code is 404\", () => {",
							"//         pm.response.to.have.status(404);",
							"//     })",
							"",
							"//     var jsonData = pm.response.json();",
							"",
							"//     pm.test(\"No users exists\", () => {",
							"//         pm.expect(jsonData.message).to.eql(\"No users exists!\")",
							"//     })",
							"// }",
							"// else {",
							"//     pm.test(`Unexpected status code - ${statusCode}`, () => {",
							"//         pm.expect.fail(`Recieved unexpected status code - ${statusCode}`)",
							"//     })",
							"// }"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get specific user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// var statusCode = pm.response.code",
							"",
							"// if(statusCode === 302) {",
							"    pm.test(\"Status code is 302\", () => {",
							"        pm.response.to.have.status(302)",
							"    })",
							"// }",
							"// else if(statusCode === 404) {",
							"//     pm.test(`Status code is 404`, () => {",
							"//         pm.response.to.have.status(404)",
							"//     })",
							"",
							"//     var jsonData = pm.response.json();",
							"",
							"//     pm.test(\"User does not exists\", ()=> {",
							"//         pm.expect(jsonData.message).to.eql(\"User does not exists!\")",
							"//     })",
							"// }",
							"// else {",
							"//     pm.test(`Unexpected status code - ${statusCode}`, () => {",
							"//         pm.expect.fail(`Received unexpected status code - ${statusCode}`)",
							"//     }) ",
							"// }"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/users/{{userId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// var statusCode = pm.response.code",
							"var jsonData = pm.response.json()",
							"",
							"// if(statusCode === 200) {",
							"    pm.test(\"Status code is 200\", () => {",
							"        pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"User details updated successfully\", () => {",
							"        pm.expect(jsonData.message).to.eql(\"User details updated successfully!\")",
							"    })",
							"// }",
							"// else if(statusCode === 404) {",
							"//     pm.test(\"Status code is 404\", () => {",
							"//         pm.response.to.have.status(404)",
							"//     })",
							"",
							"//     pm.test(\"User does not exists\", () => {",
							"//         pm.expect(jsonData.message).to.eql(\"User does not exists!\")",
							"//     })",
							"// }",
							"// else if(statusCode === 409) {",
							"//     pm.test(\"Status code is 409\", () => {",
							"//         pm.response.to.have.status(409)",
							"//     })",
							"",
							"//     pm.test(\"Email id already exists\", () => {",
							"//         pm.expect(jsonData.message).to.eql(\"Email id already exists!\")",
							"//     })",
							"// }",
							"// else {",
							"//     pm.test(`Unexpected status code - ${statusCode}`, () => {",
							"//         pm.expect.fail(`Received unexpected status code - ${statusCode}`)",
							"//     })",
							"// }"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"\",\n    \"lastName\": \"\",\n    \"email\": \"p@test.com\",\n    \"phoneNumber\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/{{userId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// var statusCode = pm.response.code",
							"var jsonData = pm.response.json()",
							"",
							"// if(statusCode === 410) {",
							"    pm.test(\"Status code is 410\", () => {",
							"        pm.response.to.have.status(410);",
							"    })",
							"",
							"    pm.test(\"User deleted successfully\", () => {",
							"        pm.expect(jsonData.message).to.eql(\"User deleted successfully!\")",
							"    })",
							"",
							"    pm.environment.set(\"userId\", \"\")",
							"// }",
							"// else if(statusCode === 404) {",
							"//     pm.test(\"Status code is 404\", () => {",
							"//         pm.response.to.have.status(404)",
							"//     })",
							"",
							"//     pm.test(\"User does not exists\", () => {",
							"//         pm.expect(jsonData.message).to.eql(\"User does not exists!\")",
							"//     })",
							"// }",
							"// else {",
							"//     pm.test(`Unexpected status code ${statusCode}`, () => {",
							"//         pm.expect.fail(`Received unexpected status code - ${statusCode}`)",
							"//     })",
							"// }"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/api/users/{{userId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}